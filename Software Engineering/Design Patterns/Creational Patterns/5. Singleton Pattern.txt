Singleton Pattern

	Singleton is a creational design pattern that lets you ensure that a class has only one instance while providing a global access point to this instance.

	If possible, do not write your singletons as singletons. Write them as normal classes, and call them via an Inversion of Control container, where you have configured the class to be a singleton instead.

	Problem

		The Singleton pattern solves two problems at the same time, violating the Single Responsibility Principle.

		1. Ensures that a class has just a single instance. The most common reason for this requirement is to control access to some shared resources. For example, a database or a file.

		2. Provide a global access point to that instance. Remember those global variables that you (all right, me) used to store some essential objects? While they’re very handy, they’re also very unsafe since any code can potentially overwrite the contents of those variables and crash the app. Just like a global variable, the Singleton pattern lets you access some object from anywhere in the program. However, it also protects that instance from being overwritten by other code.

	Solution

		All implementations of the Singleton have these two steps in common:

			1. Make the default constructor private, to prevent other objects from using the new operator with the Singleton class.

			2. Create a static creation method that acts as a constructor. Under the hood, this method calls the private constructor to create an object and saves it in a static field. All following calls to this method return the cached object.

	Applicability

		1. Use the Singleton pattern when a class in your program should have just a single instance available to all clients; for example, a single database object shared by different parts of the program.

		2. Use the Singleton pattern when you need stricter control over global variables.


	How to implement

		1. Add a private static field to the class for storing the singleton instance.

		2. Declare a public static creation method for getting the singleton instance.

		3. Implement “lazy initialization” inside the static method. It should create a new object on its first call and put it into the static field. The method should always return that instance on all subsequent calls.

		4.Make the constructor of the class private. The static method of the class will still be able to call the constructor, but not the other objects.

		5. Go over the client code and replace all direct calls to the singleton’s constructor with calls to its static creation method.

	Pros

		1. You can be sure that a class has only a single instance.
		2. You gain a global access point to that instance.
		3. The singleton object is initialized only when it’s requested for the first time.

	Cons

		1. Violates the Single Responsibility Principle. The pattern solves two problems at the time.

		2. The pattern requires special treatment in a multithreaded environment so that multiple threads won’t create a singleton object several times.

		3. It may be difficult to unit test the client code of the Singleton because many test frameworks rely on inheritance when producing mock objects. Since the constructor of the singleton class is private and overriding static methods is impossible in most languages, you will need to think of a creative way to mock the singleton. Or just don’t write the tests. Or don’t use the Singleton pattern.

	Singleton Pattern v/s Static Classes

		It doesn't matter we are creating a singleton or a static class, it is not a good practice. But sometimes, this may be unavoidable.

		The big difference between a singleton and a bunch of static methods is that singletons can implement interfaces, so you can pass around the singleton as if it were "just another" implementation. Once a client obtains a singleton instance, it can be passed as a parameter to other methods and treated as a normal object.

References

	C# Design Pattern by Steve Smith - https://app.pluralsight.com/library/courses/c-sharp-design-patterns-singleton
	https://refactoring.guru/design-patterns/singleton
	https://www.infoworld.com/article/3601752/singleton-vs-static-classes-in-csharp.html
	https://stackoverflow.com/questions/519520/difference-between-static-class-and-singleton-pattern
	https://volosoft.com/blog/Prefer-Singleton-Pattern-over-Static-Class
