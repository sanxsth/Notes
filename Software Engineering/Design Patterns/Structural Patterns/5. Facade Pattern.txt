	Facade Pattern

	'Facade' is a structural design pattern that provides a simplified interface to a library, a framework, or any other complex set of classes.

	Problem

		Imagine that you must make your code work with a broad set of objects that belong to a sophisticated library or framework. Ordinarily, you’d need to initialize all of those objects, keep track of dependencies, execute methods in the correct order, and so on.

		As a result, the business logic of your classes would become tightly coupled to the implementation details of 3rd-party classes, making it hard to comprehend and maintain.

		Imagine another scenario where you have a 'god' class with lots of public methods, your clients might not need all of it, but they are still burdened with this complexity that might be confusing to interact with.

	Solution

		A facade is a class that provides a simple interface to a complex subsystem that contains lots of moving parts. A facade might provide limited functionality in comparison to working with the subsystem directly. However, it includes only those features that clients really care about.

		The Facade provides convenient access to a particular part of the subsystem’s functionality. It knows where to direct the client’s request and how to operate all the moving parts. An Additional Facade class can be created to prevent polluting a single facade with unrelated features that might make it yet another complex structure. Additional facades can be used by both clients and other facades.

	Applicability

		1. Use the Facade pattern when you need to have a limited but straightforward interface to a complex subsystem. Often, subsystems get more complex over time. Even applying design patterns typically leads to creating more classes. A subsystem may become more flexible and easier to reuse in various contexts, but the amount of configuration and boilerplate code it demands from a client grows ever larger. The Facade attempts to fix this problem by providing a shortcut to the most-used features of the subsystem which fit most client requirements.

		2. Use the Facade when you want to structure a subsystem into layers. Create facades to define entry points to each level of a subsystem. You can reduce coupling between multiple subsystems by requiring them to communicate only through facades. For example, let’s return to our video conversion framework. It can be broken down into two layers: video-related and audio-related.

		3. Use Facade to shield clients from the complex and confusing interface of a god class.

	How to implement

		1. Check whether it’s possible to provide a simpler interface than what an existing subsystem already provides. You’re on the right track if this interface makes the client code independent from many of the subsystem’s classes.

		2. Declare and implement this interface in a new facade class. The facade should redirect the calls from the client code to appropriate objects of the subsystem. The facade should be responsible for initializing the subsystem and managing its further life cycle.

		3. To get the full benefit from the pattern, make all the client code communicate with the subsystem only via the facade. Now the client code is protected from any changes in the subsystem code. For example, when a subsystem gets upgraded to a new version, you will only need to modify the code in the facade.

		4. If the facade becomes too big, consider extracting part of its behavior to a new, refined facade class.

	Pros

		You can isolate your code from the complexity of a subsystem.

	Cons

		 A facade can become a god object coupled to all classes of an app.

References
	
	C# Design Patterns: Facade by David Starr - https://app.pluralsight.com/library/courses/csharp-design-patterns-facade
	https://refactoring.guru/design-patterns/facade
