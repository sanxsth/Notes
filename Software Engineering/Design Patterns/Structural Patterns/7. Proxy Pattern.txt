Proxy Pattern
	
	Proxy is a structural design pattern that lets you provide a substitute or placeholder for another object. It provides an extra level of indirection to support distributed, controlled, or intelligent access to the core object.

	Problem

		Proxy solves a lot of problems, let's see one - You have a massive object that consumes a vast amount of system resources. You need it from time to time, but not always. You could implement lazy initialization: create this object only when it’s actually needed. All of the object’s clients would need to execute some deferred initialization code. Unfortunately, this would probably cause a lot of code duplication. In an ideal world, we’d want to put this code directly into our object’s class, but that isn’t always possible. For instance, the class may be part of a closed 3rd-party library.

	Solution

		The Proxy pattern suggests that you create a new proxy class with the same interface as an original service object. Then you update your app so that it passes the proxy object to all of the original object’s clients. Upon receiving a request from a client, the proxy creates a real service object and delegates all the work to it. i.e, the core object is only created when the proxy receives the first request for this resource (lazy creation).

		What's more? If you need to execute something either before or after the primary logic of the class, the proxy lets you do this without changing that class. Since the proxy implements the same interface as the original class, it can be passed to any client that expects a real service object.

	Real-World Analogy 

		A credit card is a proxy for a bank account, which is a proxy for a bundle of cash. Both implement the same interface: they can be used for making a payment. A consumer feels great because there’s no need to carry loads of cash around. A shop owner is also happy since the income from a transaction gets added electronically to the shop’s bank account without the risk of losing the deposit or getting robbed on the way to the bank.

	There are 4 variations of the proxy pattern

		1. Virtual Proxy

			They can be used as a stand-in for objects that are expensive to create (Lazy initialization). This is when you have a heavyweight service object that wastes system resources by being always up, even though you only need it from time to time. Instead of creating the object when the app launches, you can delay the object’s initialization to a time when it’s really needed.

		2. Remote Proxy 

			They are used to hide the details of working with remote services. In this case, the proxy passes the client request over the network, handling all of the nasty details of working with the network.

		3. Smart Proxy 

			They perform additional operations on top of the real service, like logging, caching, etc.

		4. Protective Proxy

			These are used to protect resources from unauthorized access.

	How to implement

		1. If there’s no pre-existing service interface, create one to make proxy and service objects interchangeable. Extracting the interface from the service class isn’t always possible, because you’d need to change all of the service’s clients to use that interface. Plan B is to make the proxy a subclass of the service class, and this way it’ll inherit the interface of the service.

		2. Create the proxy class. It should have a field for storing a reference to the service. Usually, proxies create and manage the whole life cycle of their services. On rare occasions, a service is passed to the proxy via a constructor by the client.

		3. Implement the proxy methods according to their purposes. In most cases, after doing some work, the proxy should delegate the work to the service object.

		4. Consider introducing a creation method that decides whether the client gets a proxy or a real service. This can be a simple static method in the proxy class or a full-blown factory method.

		5. Consider implementing lazy initialization for the service object.

	Pros

		1. Proxies allow us to implement 'separation of concern' and SRP.
		2. Open/Closed Principle. You can introduce new proxies without changing the service or clients.

	Cons

		1. The code may become more complicated since you need to introduce a lot of new classes.
		2. The response from the service might get delayed due to this new level of indirection.

References

	C# Design Patterns: Proxy by Steve Smith - https://app.pluralsight.com/library/courses/c-sharp-design-patterns-proxy
	https://refactoring.guru/design-patterns/proxy
