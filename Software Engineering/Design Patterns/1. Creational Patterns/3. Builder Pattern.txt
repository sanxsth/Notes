Builder Pattern

	Builder is a creational design pattern that lets you construct complex objects step by step. The pattern allows you to produce different types and representations of an object using the same construction code.

	The Builder design pattern solves problems like:
		1. How can a class (the same construction process) create different representations of a complex object?
		2. How can a class that includes creating a complex object be simplified?

	Creating and assembling the parts of a complex object directly within a class is inflexible. The Builder pattern suggests that you extract the object construction code out of its own class and move it to separate objects called 'builders'.

	Products constructed by different builders don’t have to belong to the same class hierarchy or interface.

	We can bring in another level of abstraction by extracting a series of calls to the builder steps you use to construct a product into a separate class called 'director'. The director class defines the order in which to execute the building steps, while the builder provides the implementation for those steps.

	In addition, the director class completely hides the details of product construction from the client code. The client only needs to associate a builder with a director, launch the construction with the director, and get the result from the builder.

	There's a variation of this pattern called the 'fluid' builder pattern, where each build step retuns the builder instance (usually done via 'this' operator) so that the steps can be chained together.


	Applicability

		1. Use the Builder pattern to get rid of a “telescopic constructor” or bloated constructors.
		2. Useful in scenarios where there are a lot of logic in your constructor.
		3. Use the Builder pattern when you want your code to be able to create different representations of some product.

	How to implement

		1. Make sure that you can clearly define the common construction steps for building all available product representations. Otherwise, you won’t be able to proceed with implementing the pattern.

		2. Declare these steps in the base builder interface.

		3. Create a concrete builder class for each of the product representations and implement their construction steps. Don’t forget about implementing a method for fetching the result of the construction. The reason why this method can’t be declared inside the builder interface is that various builders may construct products that don’t have a common interface. Therefore, you don’t know what would be the return type for such a method. However, if you’re dealing with products from a single hierarchy, the fetching method can be safely added to the base interface.

		4. Think about creating a director class. It may encapsulate various ways to construct a product using the same builder object.

		5. The client code creates both the builder and the director objects. Before construction starts, the client must pass a builder object to the director. Usually, the client does this only once, via parameters of the director’s constructor. The director uses the builder object in all further construction. There’s an alternative approach, where the builder is passed directly to the construction method of the director.

		6. The construction result can be obtained directly from the director only if all products follow the same interface. Otherwise, the client should fetch the result from the builder.

	Pros

		1. Single Responsibility Principle. You can isolate complex construction code from the business logic of the product.
		2. Finer control over the construction process.

	Cons

		1. The overall complexity of the code increases since the pattern requires creating multiple new classes.

References

	"C# Design Patterns by Harrison Ferrone" - https://app.pluralsight.com/library/courses/c-sharp-design-patterns-builder
	https://refactoring.guru/design-patterns/builder
	https://en.wikipedia.org/wiki/Builder_pattern
