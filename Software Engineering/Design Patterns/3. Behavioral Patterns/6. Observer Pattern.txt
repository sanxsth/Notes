Observer Pattern

	Also Known As: Event-Subscriber, Listener

	'Observer' is a behavioral design pattern that lets you define a subscription mechanism to notify multiple objects about any events that happen to the object they’re observing.

	Problem

		Imagine that you have two types of objects: a 'Customer' and a 'Store'. The customer is very interested in a particular brand of product which should become available in the store very soon. The customer could visit the store every day and check product availability. But while the product is still en route, most of these trips would be pointless. On the other hand, the store could send tons of emails to all customers each time a new product becomes available. This would save some customers from endless trips to the store. At the same time, it’d upset other customers who aren’t interested in new products. It looks like we’ve got a conflict. Either the customer wastes time checking product availability or the store wastes resources notifying the wrong customers.

	Solution

		The object that has some interesting state is often called 'subject', but since it’s also going to notify other objects about the changes to its state, we’ll call it 'publisher'. All other objects that want to track changes to the publisher’s state are called 'subscribers'.

		We add a subscription mechanism to the publisher class so individual objects can subscribe to or unsubscribe from a stream of events coming from that publisher. This mechanism consists of an array field for storing a list of references to subscriber objects and several public methods which allow adding subscribers to and removing them from that list. Now, whenever an important event happens to the publisher, it goes over its subscribers and calls the specific notification method on their objects.

		The publisher wouldn't know beforehand all the classes that might subscribe to it, therefore it's crucial that all subscribers implement the same interface and that the publisher communicates with them only via that interface.

		If your app has several different types of publishers and you want to make your subscribers compatible with all of them, you can go even further and make all publishers follow the same interface. This interface would only need to describe a few subscription methods. 

	Applicability

		1. Use the Observer pattern when changes to the state of one object may require changing other objects, and the actual set of objects is unknown beforehand or changes dynamically.

		2. Use the pattern when some objects in your app must observe others, but only for a limited time or in specific cases. The subscription list is dynamic, so subscribers can join or leave the list whenever they need to.

	How to implement

		1. Break your business logic into two parts: the core functionality, independent from other code, will act as the publisher; the rest will turn into a set of subscriber classes.

		2. Declare the subscriber interface. At a bare minimum, it should declare a single 'update' method.

		3. Declare the publisher interface and describe a pair of methods for adding a subscriber object to and removing it from the list. Publishers must work with subscribers only via the subscriber interface.

		4. Create concrete publisher classes. Each time something important happens inside a publisher, it must notify all its subscribers.

		5. Implement the update notification methods in concrete subscriber classes. Most subscribers would need some context data about the event. It can be passed as an argument of the notification method.

		6. The client must create all necessary subscribers and register them with proper publishers.

	Pros

		1. Open/Closed Principle. You can introduce new subscriber classes without having to change the publisher’s code and vice versa if there’s a publisher interface.

		2. You can establish relations between objects at runtime.

	Cons

		1. If not used carefully the observer pattern can add unnecessary complexity and might break the encapsulation of the publisher.
		2. The order of Observer notifications is undependable.

References
	
	What is the Observer Pattern? - https://www.youtube.com/watch?v=lANfXJdXe34
	https://refactoring.guru/design-patterns/observer
	https://stackoverflow.com/questions/11619680/why-should-the-observer-pattern-be-deprecated
