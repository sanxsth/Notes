Bridge Pattern

	'Bridge' is a structural design pattern that lets you split a class hierarchy into separate hierarchies, which can be developed independently of each other, through composition to reduce coupling.

	GOF Definition:

		The bridge pattern is a design pattern used in software engineering that is meant to "decouple an abstraction from its implementation so that the two can vary independently".

		Abstraction (also called interface) is a high-level control layer for some entity. This layer isn’t supposed to do any real work on its own. It should delegate the work to the implementation layer (also called platform).

		Note that we’re not talking about interfaces or abstract classes from our programming languages. People often confuse the 'abstraction' and 'implementation' mentioned in the GOF definition with the ones we have in our programming languages.
		

	Problem

		Say you have a geometric 'Shape' class with a pair of subclasses: 'Circle' and 'Square'. You want to extend this class hierarchy to incorporate colors, so you plan to create 'Red' and 'Blue' shape subclasses. However, since you already have two subclasses, you’ll need to create four class combinations such as 'BlueCircle' and 'RedSquare'.

		Adding a new shape or a color will grow the number of classes exponentially.

	Solution

		This problem occurs because we’re trying to extend the shape classes in two independent dimensions: by form and by color. That’s a very common issue with class inheritance.

		The Bridge pattern attempts to solve this problem by switching from inheritance to object composition. What this means is that you extract one of the dimensions into a separate class hierarchy, so that the original classes will reference an object of the new hierarchy, instead of having all of its state and behaviors within one class.

		In our case, we can create a separate class called 'color' and extend it to create classes such as: 'Blue' and 'Red'. The 'Shape' class would now refer to these color objects. Now the 'Shape' class can delegate any color-related work to this linked 'Color' object.

	Applicability

		1. Use the Bridge pattern when you want to divide and organize a monolithic class that has several variants of some functionality (for example, if the class can work with various database servers). The Bridge pattern lets you split the monolithic class into several class hierarchies. After this, you can change the classes in each hierarchy independently of the classes in the others. This approach simplifies code maintenance and minimizes the risk of breaking existing code.

		2. Use the pattern when you need to extend a class in several orthogonal (independent) dimensions. The Bridge suggests that you extract a separate class hierarchy for each of the dimensions. The original class delegates the related work to the objects belonging to those hierarchies instead of doing everything on its own.

	How to implement

		1. Identify the orthogonal dimensions in your classes. These independent concepts could be: abstraction/platform, domain/infrastructure, front-end/back-end, or interface/implementation.

		2. See what operations the client needs and define them in the base 'abstraction' class.

		3. Determine the operations available on all platforms. Declare the ones that the abstraction needs in the general 'implementation' interface.

		4. For all platforms in your domain, create concrete implementation classes but make sure they all follow the implementation interface.

		5. Inside the abstraction class, add a reference field for the implementation type. The abstraction delegates most of the work to the implementation object that’s referenced in that field.

		6. If you have several variants of high-level logic, create refined abstractions for each variant by extending the base abstraction class.

		7. The client code should pass an implementation object to the abstraction’s constructor to associate one with the other. After that, the client can forget about the implementation and work only with the abstraction object.

	Pros 

		1. Open/Closed Principle. You can introduce new abstractions and implementations independently from each other.
		2. Single Responsibility Principle. You can focus on high-level logic in the abstraction and on platform details in the implementation.

	Cons

		1. You might make the code more complicated by applying the pattern to a highly cohesive class.

References

	C# Design Patterns: Bridge by Vladimir Khorikov - https://app.pluralsight.com/library/courses/design-patterns-c-sharp-bridge
	https://refactoring.guru/design-patterns/bridge
