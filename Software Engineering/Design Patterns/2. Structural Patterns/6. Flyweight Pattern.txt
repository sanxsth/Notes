Flyweight Pattern

	Also Known As: Cache

	Flyweight is a structural design pattern that lets you fit more objects into the available amount of RAM by sharing common parts of the state between multiple objects instead of keeping all of the data in each object.

	The Flyweight pattern is merely an optimization. Before applying it, make sure your program does have the RAM consumption problem related to having a massive number of similar objects in memory at the same time. Make sure that this problem can’t be solved in any other meaningful way.

	Problem

		Sometimes your application creates too many objects that you won't have sufficient space in your RAM for other operations.

	Solution

		The constant data of an object is usually called the intrinsic state. It lives within the object; other objects can only read it, not change it. The rest of the object’s state, often altered “from the outside” by other objects, is called the extrinsic state.

		The Flyweight pattern suggests that you stop storing the extrinsic state inside the object. Instead, you should pass this state to specific methods which rely on it. Only the intrinsic state stays within the object, letting you reuse it in different contexts. As a result, you’d need fewer of these objects since they only differ in the intrinsic state, which has much fewer variations than the extrinsic.

		Where does the extrinsic state move to? Some class should still store it, right? The solution is to create a separate context class that would store the extrinsic state along with reference to the flyweight object. These objects are much smaller than before. The most memory-consuming fields have been moved to just a few flyweight objects. Now, a thousand small contextual objects can reuse a single heavy flyweight object instead of storing a thousand copies of its data.

		Since the same flyweight object can be used in different contexts, you have to make sure that its state can’t be modified. A flyweight should initialize its state just once, via constructor parameters. It shouldn’t expose any setters or public fields to other objects.

		For more convenient access to various flyweights, you can create a factory method that manages a pool of existing flyweight objects. The method accepts the intrinsic state of the desired flyweight from a client, looks for an existing flyweight object matching this state, and returns it if it was found. If not, it creates a new flyweight and adds it to the pool.

	Applicability

		Use the Flyweight pattern only when your program must support a huge number of objects which barely fit into available RAM. The pattern is mostly useful when an application needs to spawn a huge number of similar objects. This drains all available RAM on a target device. And these objects contain duplicate states which can be extracted and shared between multiple objects.

	How to implement

		1. Divide fields of a class that will become a flyweight into two parts:
			- the intrinsic state: the fields that contain unchanging data duplicated across many objects.
			- the extrinsic state: the fields that contain contextual data unique to each object.

		2. Leave the fields that represent the intrinsic state in the class, but make sure they’re immutable. They should take their initial values only inside the constructor.

		3. Go over methods that use fields of the extrinsic state. For each field used in the method, introduce a new parameter and use it instead of the field.

		4. Optionally, create a factory class to manage the pool of flyweights. It should check for an existing flyweight before creating a new one. Once the factory is in place, clients must only request flyweights through it. They should describe the desired flyweight by passing its intrinsic state to the factory.

		5. The client must store or calculate values of the extrinsic state (context) to be able to call methods of flyweight objects. For the sake of convenience, the extrinsic state along with the flyweight-referencing field may be moved to a separate context class.

	Pros

		You can save lots of RAM, assuming your program has tons of similar objects.

	Cons

		1.  You might be trading RAM over CPU cycles when some of the context data needs to be recalculated each time somebody calls a flyweight method.

		2. The code becomes much more complicated.

	Flyweight vs Singleton

		1. There should be only one Singleton instance, whereas a Flyweight class can have multiple instances with different intrinsic states.
		2. The Singleton object can be mutable. Flyweight objects are immutable.

References

	C# Design Patterns: Flyweight by Harrison Ferrone - https://app.pluralsight.com/library/courses/c-sharp-design-patterns-flyweight
	https://refactoring.guru/design-patterns/flyweight
