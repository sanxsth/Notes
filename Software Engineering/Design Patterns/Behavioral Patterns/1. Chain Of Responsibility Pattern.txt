Chain Of Responsibility Pattern

	Also Known As: CoR, Chain of Command

	Chain of Responsibility is a behavioral design pattern that lets you pass requests along a chain of handlers. Upon receiving a request, each handler decides either to process the request or to pass it to the next handler in the chain.

	Problem

		Imagine that you’re working on an online ordering system. You want to restrict access to the system so only authenticated users can create orders. Also, users who have administrative permissions must have full access to all orders. 

		After a bit of planning, you realized that these checks must be performed sequentially. The application can attempt to authenticate a user to the system whenever it receives a request that contains the user’s credentials. However, if those credentials aren’t correct and authentication fails, there’s no reason to proceed with any other checks.

		During the next few months, you implemented several more of those sequential checks. The code of the checks, which had already looked like a mess, became more and more bloated as you added each new feature. Changing one check sometimes affected the others. Worst of all, when you tried to reuse the checks to protect other components of the system, you had to duplicate some of the code since those components required some of the checks, but not all of them.

		The system became very hard to comprehend and expensive to maintain. You struggled with the code for a while, until one day you decided to refactor the whole thing.

	Solution

		The Chain of Responsibility relies on transforming particular behaviors into stand-alone objects called handlers. In our case, each check should be extracted to its own class with a single method that performs the check. The request, along with its data, is passed to this method as an argument.

		You then link these handlers into a chain. Each linked handler has a field for storing a reference to the next handler in the chain. In addition to processing a request, handlers pass the request further along the chain. The request travels along the chain until all handlers have had a chance to process it. A handler can decide not to pass the request further down the chain and effectively stop any further processing.

		There’s a slightly different approach in which, upon receiving a request, a handler decides whether it can process it. If it can, it doesn’t pass the request any further. So it’s either only one handler that processes the request or none at all.

	Applicability

		1. Use the Chain of Responsibility pattern when your program is expected to process different kinds of requests in various ways, but the exact types of requests and their sequences are unknown beforehand.

		2. Use the pattern when it’s essential to execute several handlers in a particular order.

		3. CoR is an Object-Oriented way of expressing a chain of complex 'if', 'else if', and 'else' statements.

	How to implement

		1. Declare the handler interface and describe the signature of a method for handling requests.

		2. To eliminate duplicate boilerplate code in concrete handlers, it might be worth creating an abstract base handler class, derived from the handler interface. This class should have a field for storing a reference to the next handler in the chain. Consider making the class immutable. However, if you plan to modify chains at runtime, you need to define a setter for altering the value of the reference field.

		3. One by one create concrete handler subclasses and implement their handling methods. Each handler should make two decisions when receiving a request:

			a. Whether it’ll process the request.
			b. Whether it’ll pass the request along the chain.

		4. The client may either assemble chains on its own or receive pre-built chains from other objects.

		5. The client may trigger any handler in the chain, not just the first one. The request will be passed along the chain until some handler refuses to pass it further or until it reaches the end of the chain.

		6. Due to the dynamic nature of the chain, the client should be ready to handle the following scenarios:

			a. The chain may consist of a single link.
			b. Some requests may not reach the end of the chain.
			c. Others may reach the end of the chain unhandled.

	Pros

		1. Single Responsibility Principle. You can decouple classes that invoke operations from classes that perform operations.
		2. Open/Closed Principle. You can introduce new handlers into the app without breaking the existing client code.
		3. Offers a flexible and extensible way of applying conditions on a request.

	Cons

		1. Increases the number of classes involved. And if not configured properly, some requests might end up unhandled.

References
	
	C# Design Patterns: Chain of Responsibility by Filip Ekberg - https://app.pluralsight.com/library/courses/c-sharp-design-patterns-chain-responsibility

	https://refactoring.guru/design-patterns/chain-of-responsibility
