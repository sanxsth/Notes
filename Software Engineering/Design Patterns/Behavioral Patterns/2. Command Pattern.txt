Command Pattern

	Also Known As: Action, Transaction Pattern

	'Command' is a behavioral design pattern that turns a request into a stand-alone object that contains all information about the request. This transformation lets you pass requests as a method arguments, delay or queue a request’s execution, and support undoable operations.

	Problem

		Imagine you are working on the GUI for your new application and you have created a toolbar with a bunch of buttons to do various operations. While all of these buttons look similar, they’re all supposed to do different things. Where would you put the code for the various click handlers of these buttons? The simplest solution is to create tons of subclasses for each place where the button is used. These subclasses would contain the code that would have to be executed on a button click.

		This approach is inefficient and you will end up having a large number of subclasses, and this would be okay if you weren’t risking breaking the code in these subclasses each time you modify the base 'Button' class. Your GUI code has become dependent on the volatile code of the business logic.

		Some operations, such as copying/pasting text, would need to be invoked from multiple places. For example, a user could click a small “Copy” button on the toolbar, or copy something via the context menu, or just hit Ctrl+C on the keyboard. When you implement context menus, shortcuts, and other stuff, you have to either duplicate the operation’s code in many classes or make menus dependent on buttons, which is an even worse option.

	Solution

		Good software design is often based on the principle of separation of concerns, which usually results in breaking an app into layers. The most common example: a layer for the graphical user interface and another layer for the business logic. The GUI layer is responsible for taking inputs and rendering the results on the screen, while the underlying layer takes care of the business logic.

		The Command pattern suggests that you shouldn't let the GUI directly interact with the business logic layer. Instead, you should extract all of the request details, such as the object being called, the name of the method, and the list of arguments into a separate command class with a single method that triggers this request.

		Command objects serve as links between various GUI and business logic objects. Make your commands implement the same interface. Usually, it has just a single execution method that takes no parameters. This interface lets you use various commands with the same request sender, without coupling it to concrete classes of commands.

		As a result, commands become a convenient middle layer that reduces coupling between the GUI and business logic layers.

	Applicability

		1. Use the Command pattern when you want to parametrize objects with operations. The Command pattern can turn a specific method call into a stand-alone object. This change opens up a lot of interesting uses: you can pass commands as method arguments, store them inside other objects, switch linked commands at runtime, etc.

		2. Use the Command pattern when you want to queue operations, schedule their execution, or execute them remotely.

		3. Use the Command pattern when you want to implement reversible operations.

	How to implement

		1. Declare the command interface with a single execution method.

		2. Start extracting requests into concrete command classes that implement the command interface. Each class must have a set of fields for storing the request arguments along with a reference to the actual receiver object. All these values must be initialized via the command’s constructor.

		3. Identify classes that will act as senders. Add the fields for storing commands into these classes. Senders should communicate with their commands only via the command interface. Senders usually don’t create command objects on their own, but rather get them from the client code.

		4. Change the senders so they execute the command instead of sending a request to the receiver directly.

		5. The client should initialize objects in the following order:

			- Create receivers.
			- Create commands, and associate them with receivers if needed.
			- Create senders, and associate them with specific commands.

	Pros

		1. Single Responsibility Principle. You can decouple classes that invoke operations from classes that perform these operations.
		2. Open/Closed Principle. You can introduce new commands into the app without breaking existing client code.
		
	Cons

		1. The code may become more complicated since you’re introducing a whole new layer between senders and receivers.

References

	https://refactoring.guru/design-patterns/command
	C# Design Patterns: Command by Filip Ekberg - https://app.pluralsight.com/library/courses/c-sharp-command-pattern
