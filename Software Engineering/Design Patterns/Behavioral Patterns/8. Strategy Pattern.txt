Strategy Pattern

	Also Known As: Policy Pattern

	'Strategy' is a behavioral design pattern that lets you define a family of algorithms, put them into a separate class, and make their objects interchangeable.

	Problem

		Assume you have a 'Navigator' class that lets users enter an address and see the fastest route to that destination displayed on the map. Initially, you write the algorithm for finding a route for a car. Later you add bike support. And then a new request comes in asking for walking routes.

		Each time you added a new routing algorithm, the main class of the navigator doubled in size. At some point, the beast became too hard to maintain.

		Any change to one of the algorithms, whether it was a simple bug fix or a slight adjustment of the street score, affected the whole class, increasing the chance of creating an error in already-working code. In addition, teamwork became inefficient. Your teammates, who had been hired right after the successful release, complain that they spend too much time resolving merge conflicts. Implementing a new feature requires you to change the same huge class, conflicting with the code produced by other people.

	Solution

		The Strategy pattern suggests that you take a class that does something specific in a lot of different ways and extract all of these algorithms into separate classes called 'strategies'.

		The original class, called 'context', must have a field for storing a reference to one of the strategies. The context delegates the work to a linked strategy object instead of executing it on its own.

		The context isn’t responsible for selecting an appropriate algorithm for the job. Instead, the client passes the desired strategy to the context. In fact, the context doesn’t know much about strategies. It works with all strategies through the same generic interface, which only exposes a single method for triggering the algorithm encapsulated within the selected strategy.

		This way the context becomes independent of concrete strategies, so you can add new algorithms or modify existing ones without changing the code of the context or other strategies.

	Applicability

		1. Use the Strategy pattern when you want to use different variants of an algorithm within an object and be able to switch from one algorithm to another during runtime.

		2. Use the Strategy when you have a lot of similar classes that only differ in the way they execute some behavior. The Strategy pattern lets you isolate the code, internal data, and dependencies of various algorithms from the rest of the code. Various clients get a simple interface to execute the algorithms and switch them at runtime.

	How to implement

		1. In the context class, identify an algorithm that’s prone to frequent changes. It may also be a massive conditional that selects and executes a variant of the same algorithm at runtime.

		2. Declare the strategy interface common to all variants of the algorithm.

		3. One by one, extract all algorithms into their own classes. They should all implement the strategy interface.

		4. In the context class, add a field for storing a reference to a Strategy object. Provide a setter for replacing the value of that field. The context should work with the strategy object only via the strategy interface. The context may define an interface that lets the strategy access its data.

		5. Clients of the context must associate it with a suitable strategy that matches the way they expect the context to perform its primary job.

	Pros

		1. Open/Closed Principle. You can introduce new strategies without having to change the context.

		2. SRP: You can isolate the implementation details of an algorithm from the code that uses it (instead of implementing these algorithms within the context class).

		3. You can replace inheritance with composition.

	Cons

		1. If you only have a couple of algorithms and they rarely change, there’s no real reason to overcomplicate the program with new classes and interfaces that come along with the pattern.

		2. Clients must be aware of the differences between strategies to be able to select a proper one.

References

	C# Design Patterns: Strategy by Filip Ekberg - https://app.pluralsight.com/library/courses/c-sharp-design-patterns-strategy
	https://refactoring.guru/design-patterns/strategy
