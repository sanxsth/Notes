C# - Introduction

	C# (pronounced "See Sharp") is a modern, object-oriented, and type-safe programming language. C# enables developers to build many types of secure and robust applications that run in .NET. C# is an object-oriented, component-oriented programming language.

	All C# types, including primitive types such as int and double, inherit from a single root 'object' type.

	.Net Architecture

		C# programs run on .NET, a virtual execution system called the common language runtime (CLR), and a set of class libraries. The CLR is the implementation by Microsoft of the common language infrastructure (CLI), an international standard.

		Source code written in C# is compiled into an intermediate language (IL) that conforms to the CLI specification. The IL code and resources, such as bitmaps and strings, are stored in an assembly, typically with an extension of .dll. An assembly contains a manifest that provides information about the assembly's types, version, and culture.

		When the C# program is executed, the assembly is loaded into the CLR. The CLR performs Just-In-Time (JIT) compilation to convert the IL code to native machine instructions. The CLR provides other services related to automatic garbage collection, exception handling, and resource management. Code that's executed by the CLR is sometimes referred to as "managed code." "Unmanaged code," is compiled into native machine language that targets a specific platform.

		Language interoperability is a key feature of .NET. IL code produced by the C# compiler conforms to the Common Type Specification (CTS). IL code generated from C# can interact with code that was generated from the .NET versions of F#, Visual Basic, C++, etc. A single assembly may contain multiple modules written in different .NET languages. The types can reference each other as if they were written in the same language.

		In addition to the run time services, .NET also includes extensive libraries. The libraries include everything from file input and output to string manipulation to XML parsing, to web application frameworks to Windows Forms controls. The typical C# application uses the .NET class library extensively to handle common "plumbing" chores.

	Namespaces

		Namespaces provide a hierarchical means of organizing C# programs and libraries. Namespaces contain types and other namespaces. A 'using' directive that references a given namespace enables unqualified use of the types that are members of that namespace. For example, you may use 'Console.WriteLine' instead of 'System.Console.WriteLine' by including 'using System;' in your code.

	 By convention, a static method named 'Main' serves as the entry point of a C# program.


	 Types And Variables

	 	A type defines the structure and behavior of any data in C#. The declaration of a type may include its members, base type, interfaces it implements, and operations permitted for that type. A variable is a label that refers to an instance of a specific type.

	 	There are two kinds of types in C#: value types and reference types. Variables of value types directly contain their data. Variables of reference types store references to their data, the latter being known as objects. 

	 	An identifier is a variable name. An identifier is a sequence of Unicode characters without any whitespace. An identifier may be a C# reserved word if it's prefixed by '@'.

	 	C#'s value types are further divided into simple types, enum types, struct types, nullable value types, and tuple value types. C#'s reference types are further divided into class types, interface types, array types, and delegate types.

	 	C# programs use type declarations to create new types. A type declaration specifies the name and the members of the new type. Six of C#'s categories of types are user-definable: 'class' types, 'struct' types, 'interface' types, 'enum' types, 'delegate' types, and 'tuple' value types. The 'class', 'struct', 'interface', and 'delegate' types all support generics, whereby they can be parameterized with other types.

	 	C# supports single-dimensional and multi-dimensional arrays of any type.

	 		int[] a; // is a single-dimensional array of int
	 		int[][] a2; // is a 2-dimensional array of int

	 	Nullable types don't require a separate definition. For each non-nullable type 'T', there's a corresponding nullable type 'T?', which can hold an additional value, 'null'.

	 	C#'s type system is unified such that a value of any type can be treated as an 'object'. Every type in C# directly or indirectly derives from the 'object' class type, and 'object' is the ultimate base class of all types. Values of reference types are treated as objects simply by viewing the values as type 'object'. Values of value types are treated as objects by performing boxing and unboxing operations. For example, 

	 		int i = 123;
			object o = i;    // Boxing
			int j = (int)o;  // Unboxing

		When a value of a value type is assigned to an object reference, a "box" is allocated to hold the value. That box is an instance of a reference type, and the value is copied into that box. Conversely, when an object reference is cast to a value type, a check is made that the referenced object is a box of the correct value type. If the check succeeds, the value in the box is copied to the value type.

	There are several kinds of variables in C#, including fields, array elements, local variables, and parameters. Variables represent storage locations.

	Program Structure

		The key organizational concepts in C# are programs, namespaces, types, members, and assemblies. Programs declare types, which contain members and can be organized into namespaces.

		C# programs can be stored in several source files. When a C# program is compiled, all of the source files are processed together, and the source files can freely reference each other. Conceptually, it's as if all the source files were concatenated into one large file before being processed. Forward declarations are never needed in C# because, with few exceptions, declaration order is insignificant. C# doesn't limit a source file to declaring only one public type nor does it require the name of the source file to match a type declared in the source file.

Reference
	https://docs.microsoft.com/en-us/dotnet/csharp/tour-of-csharp/
