Types

	Classes And Objects

		A class is a data structure that combines state (fields) and actions (methods and other function members) in a single unit. Instances of the class are known as 'objects'.

		A class may inherit directly from one parent class, and it may implement any number of interfaces. Methods that override virtual methods in a parent class require the override keyword as a way to avoid accidental redefinition.

		Sample Class Declaration

			public class Point
			{
				public int X { get; }
				public int Y { get; }

				public Point(int x, int y) => (X, Y) = (x, y);
			}

		Instances of classes are created using the 'new' operator, which allocates memory for a new instance, invokes a constructor to initialize the instance, and returns a reference to the instance. For example, var p1 = new Point(0, 0);


		The memory occupied by an object is automatically reclaimed when the object is no longer reachable. It's not necessary or possible to explicitly deallocate objects in C#.

	Type Parameters

		Generic classes define type parameters. Type parameters are a list of type parameter names enclosed in angle brackets. Type parameters follow the class name. For example,

			public class Pair<TFirst, TSecond>
			{
				public TFirst First { get; }
				public TSecond Second { get; }

				public Pair(TFirst first, TSecond second) => 
					(First, Second) = (first, second);
			}

		A class type that is declared to take type parameters is called a generic class type. Struct, interface, and delegate types can also be generic.

		Usage:
			var pair = new Pair<int, string>(1, "two");

		A generic type with type arguments provided, like Pair<int, string> above, is called a constructed type.

	Base Classes

		A class declaration may specify a base class. Follow the class name and type parameters with a colon and the name of the base class. Omitting a base class specification is the same as deriving from the type 'object'.

		Example:

			public class Point3D : Point
			{
				public int Z { get; set; }
				
				public Point3D(int x, int y, int z) : base(x, y)
				{
					Z = z;
				}
			}

		A class inherits the members of its base class. A class doesn't inherit the instance and static constructors, and the finalizer. A derived class can add new members to those members it inherits, but it can't remove the definition of an inherited member.

		An implicit conversion exists from a class type to any of its base class types. A variable of a class type can reference an instance of that class or an instance of any derived class.

	Structs

		'struct' types are simpler types whose primary purpose is to store data values. Structs can't declare a base type; they implicitly derive from 'System.ValueType'. You can't derive other 'struct' types from a 'struct' type. They're implicitly sealed.

		a 'struct' is like a lightweight class; it's a stack-allocated type that can implement interfaces but doesn't support inheritance.

	Interfaces

		An 'interface' defines a contract that can be implemented by classes and structs. You define an 'interface' to declare capabilities that are shared among distinct types.

		An interface can contain methods, properties, events, and indexers. An interface typically doesn't provide implementations of the members it definesâ€”it merely specifies the members that must be supplied by classes or structs that implement the interface. Interfaces may employ multiple inheritance. Classes and structs can implement multiple interfaces.

		Example:

			interface IControl
			{
				void Paint();
			}

			interface ITextBox : IControl
			{
				void SetText(string text);
			}

			interface IListBox : IControl
			{
				void SetItems(string[] items);
			}

			interface IComboBox : ITextBox, IListBox { }

	Enums

		An Enum type defines a set of constant values.

		Example:

			[Flags]
			public enum Seasons
			{
				None = 0,
				Summer = 1,
				Autumn = 2,
				Winter = 4,
				Spring = 8,
				All = Summer | Autumn | Winter | Spring
			}

	Nullable Types

		Variables of any type may be declared as non-nullable or nullable. A nullable variable can hold an additional 'null' value, indicating no value. Nullable Value types (structs or enums) are represented by System.Nullable<T>. Non-nullable and Nullable Reference types are both represented by the underlying reference type. The distinction is represented by metadata read by the compiler and some libraries. The compiler also provides warnings when non-nullable references are assigned a value that may be 'null'.

	Tuples

		C# supports tuples, which provide concise syntax to group multiple data elements in a lightweight data structure. You instantiate a tuple by declaring the types and names of the members between ( and ), as shown in the following example:

			(double Sum, int Count) t2 = (4.5, 3);
			Console.WriteLine($"Sum of {t2.Count} elements is {t2.Sum}.");

Reference	
	https://docs.microsoft.com/en-us/dotnet/csharp/tour-of-csharp/types
