CPP CheatSheet

	class

		class Person 
		{
			private:
				string name;
				int age;

			public:
				Person(string n, int a)
				{
					name = n;
					age = a;
				}

				string get_name()
				{
					return name;
				}
		};

		usage

			Person p("Tom", 13);
			cout<<p.get_name();

			Person *p = new Person('Tom', 14);
			cout<<p->get_name();

	struct

		struct Person
		{
			string name;
			int age;
		};

		usage

			Person *p = new Person();
			p->name = "tom";
			p->age = 14;

			Person p = {"tom", 13}; // same order as declared inside struct.
			cout<<p.name;

	Template function

		template<typename T>
		T add(T a, T b)
		{
			return a + b;
		}

		usage: add<int>(1, 3);

		template<typename T>
		class Pair
		{
			public:
			T a;
			T b;

			Pair(T ta, T tb)
			{
				a = ta;
				b = tb;
			}
		};

		usage: Pair<int> p(1, 3);


	Pointers

		int a = 10;
		int* ptr = &a; // & is reference operator
		*ptr = 12; // * is dereference operator

		int b = &a; // b is a reference (alias) variable
		int* ptr = new int[5];

		new operator usage

			pointer = new datatype; // int* ptr = new int;
			delete ptr; // use delete[] ptr if ptr points to arrays.

	STL Data Structures

		vector (dynamic array)

			vector<int> v = {1, 2 ,3 , 4};
			vector<int> v(10, 4); // declares a vector with 10 '4' elements

			common methods: begin(), clear() O(1) for scalar types, empty(), end(), insert(), pop_back(), push_back(), rbegin(), rend(), size().

		stack

			stack<int> s;
			common methods: empty(), push(), pop() // returns void, size(), top() // returns a reference to the top element.

		queue

			queue<int> q;
			common methods: empty(), front() // returns ref, back() // returns ref, pop() // returns void, push(), size()

		dequeue

			dequeue<int> dq;
			common methods: back(), front(), push_back(), push_front(), pop_back(), pop_front()
			

		set

			ordered set

				set<int> s = {3, 1, 2, 4, 0}; // elements are ordered using internal comparision object.
				common method: begin(), clear(), count(type val), empty(), end(), rbegin(), rend(), size(), lower_bound(val), upper_bound(val);
							   erase(interator) // amortized constant; erase(val) // logarithmic
							   find(val) // returns an interator if found, else set::end.
							   insert(val) // returns pair<iterator, bool>; iterator to inserted element, bool false if the element already present
							   hind based insertion can give amortized O(1) if the given hints are optimal

			unordered set

				unordered_set us = {3, 1, 2, 4, 0}; // elements are stored in no particular order on a hashmap (separate chaining)
				common method: begin(), bucket(val) // returns the bucket number, clear(), count(), empty(), size()
							   erase(interator) // amortized constant; erase(val) // logarithmic
							   find(val) // returns an interator if found, else set::end.
							   insert(val) // returns pair<iterator, bool>; iterator to inserted element, bool false if the element already present

			multiset

				multiset<int> s = {3, 1, 3, 1, 2, 2, 4, 0}; // it's like an ordered set, but can store mutiple copies of the same element. operations are same as ordered set

		map 

			ordered map

				map<int, string> m = { {1, "tim" }, {2, "tom"}, {3, "max"} }; // elements are ordered using internal comparision object.
				m[4] = "man"; // inserts a new key '4'.
				common method: m.at(2) = "tommy", // throws exception if 2 doesn't exist.
				begin(), clear(), count(), empty(), end(), erase() // takes in an iterator or the key, rbegin(), rend(), size()
				find(key) // returns an iterator, map::end else
				insert({key, value});

				lower_bound and upper_bound on the key

			unorder_map

				unorder_map<int, string> m; // is similar to an unorder_set

			multi_map 

				multi_map<int, string> m; // similar to ordered map but can store the same key multiple times.


		priority queue

			priority_queue<int, vector<int>, greater<int>> pq; // comp should be greater for min heap, and less than for max heap.

			custom comparator

				struct compare
				{
					bool operator()(int a, int b)
					{
						return a < b;
					}
				}

			common methods: push(), pop(), top(), empty(), size().

	Common STL Algos

		sort(v.begin(), v.end());
		sort(v.rbegin(), v.end()); // sorts in descending order
		sort(v.begin(), v.end(), comp); // custom sort

		reverse(v.begin(), v.end());

		lower_bound(v.begin(), v.end(), val);
		next_permutation(v.begin(), v.end()); // returns 'true' if there is a lexicographicaly higher permutation possible.

		stoi("33"); // converts a string to integer.
		to_string(11); // converts val to string.

	Strings in cpp

		strings are like vector<char> hence most of the methods are the same.

		append(string).

		string s = "hello" + " " + "world";

		substr(int pos, int len); // position of the first character and the number of characters to include. exclude len for all characters until the end.


	swap(a, b);

	INT_MIN, INT_MAX; usage: int x = INT_MIN;

	Tuple

		tuple<int, int, int, int> t = make_tuple(1, 2, 3, 4);
		cout<<get<0>(t); // prints '1';
		t = {1, 2, 3, 4}; 