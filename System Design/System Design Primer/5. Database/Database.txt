Database

	A relational database like SQL is a collection of data items organized in tables.

	ACID is a set of properties of relational database transactions.

	Atomicity - Each transaction is all or nothing.
	Consistency - Any transaction will bring the database from one valid state to another.
	Isolation - Executing transactions concurrently has the same results as if the transactions were executed serially.
	Durability - Once a transaction has been committed, it will remain so.
	There are many techniques to scale a relational database: master-slave replication, master-master replication, federation, sharding, denormalization, and SQL tuning.

	Replication

		Master-Slave Replication

			The master serves reads and writes, replicating writes to one or more slaves, which serve only reads. Slaves can also replicate to additional slaves in a tree-like fashion. If the master goes offline, the system can continue to operate in read-only mode until a slave is promoted to a master or a new master is provisioned.

			Disadvantage: additional logic is required to promote a slave to a master.

		Master-Master Replication

			Both masters serve reads and write and coordinate with each other on writes. If either master goes down, the system can continue to operate with both reads and writes.

			Disadvantages:

				1. You'll need a load balancer or you'll need to make changes to your application to determine where to write.
				2. Conflict resolution comes more into play as more write nodes are added and as latency increases.

		Disadvantages of replication

			1. The database will be either loosely consistent or have increased write latency due to synchronization.
			2. There's a potential for data loss if the master fails before any newly written data can be replicated to other nodes.
			3. More slaved leads to greater replication lag.
			4. Replication adds more hardware and additional complexity.

	Federation

		Federation (or functional partitioning) splits up databases by function. For example, instead of a single, monolithic database, you could have three databases: forums, users, and products, resulting in less read and write traffic to each database and therefore less replication lag. Smaller databases result in more data that can fit in memory, which in turn results in more cache hits due to improved cache locality. With no single central master serializing writes you can write in parallel, increasing throughput.

		Disadvantages

			Federation isn't effective if your schema required huge functions or tables.
			Required updating application logic to determine the database to use.
			Joining data from two databases is more complex with a server link.
			Adds more hardware and additional complexity.

	Sharding

		Sharding distributes data across different databases such that each database can only manage a subset of the data. Taking a users database as an example, as the number of users increases, more shards are added to the cluster.

		Similar to the advantages of 'federation', sharding results in less read and write traffic, less replication, and more cache hits. Index size is also reduced, which generally improves performance with faster queries. If one shard goes down, the other shards are still operational, although you'll want to add some form of replication to avoid data loss. Like federation, there is no single central master serializing writes, allowing you to write in parallel with increased throughput.

		Common ways to 'shard' a table of users is either through the user's last name initial or the user's geographic location.

		Disadvantages

			1. Application logic should be updated to work with shards.
			2. Data distribution can become lopsided. This can be reduced by using consistent hashing.
			3. Joining shards on multiple shards is more complex.
			4. Sharding adds more hardware and additional complexity.

		Federation is a logical partitioning but suffers if a schema has a large table. In sharding, we partition the table and hence do not suffer from this drawback. There seems to a lot of debate over federation vs sharding, my understanding of this is based on 'System Desing Primer'.

		Further reading:

			- http://highscalability.com/blog/2009/8/6/an-unorthodox-approach-to-database-design-the-coming-of-the.html
			- https://en.wikipedia.org/wiki/Shard_(database_architecture)
			- http://www.paperplanes.de/2011/12/9/the-magic-of-consistent-hashing.html
			- https://www.toptal.com/big-data/consistent-hashing

	Denormalization

		Denormalization attempts to improve read performance at the expense of some write performance. Redundant copies of the data are written in multiple tables to avoid expensive joins. Some RDBMS such as PostgreSQL and Oracle support materialized views which handle the work of storing redundant information and keeping redundant copies consistent. This technique is really useful in federated or sharded databases where managing joins across data centers further increases complexity.

		Disadvantages:

			- Data is duplicated.
			- Constraints that can help keep the redundant copies in sync can increase the complexity of the DB design.
			- A denormalized DB under heavy write load performs worse than its normalized counterpart.

		Further reading:

			https://en.wikipedia.org/wiki/Denormalization

	SQL Tuning

		SQL Tuning is a broad topic and we won't be able to cover it in this note. Following are some general tips and tricks to improve your DB performance.

		Often Benchmark and Profile to uncover bottlenecks.

			- Benchmark: Simulate high load situations with tools such as ab.
			- Profile: Enable tools such as 'slow query log' to help track performance issues.

		Use denormalization to avoid expensive joins. Make indices of columns frequently used in queries. Tune the query cache to avoid performance issues

		Further reading:

			http://aiddroid.com/10-tips-optimizing-mysql-queries-dont-suck/
			http://dev.mysql.com/doc/refman/5.7/en/slow-query-log.html
			http://stackoverflow.com/questions/1017239/how-do-null-values-affect-performance-in-a-database-search

	NoSQL

		NoSQL (aka 'Not Only SQL') are non-tabular, store data differently than relational tables. They are called 'Not Only SQL' to emphasize that they may support SQL-like query languages or sit alongside SQL database in polyglot-persistent architectures. Data is denormalized and joins are generally done in the application code. Most NoSQL stores lack 'ACID' properties and favor eventual consistency, they chose 'availability' over 'consistency'.

		'BASE' is often used to describe the properties of NoSQL databases.

			- Basically available: the system guarantees availability.
			- Soft state: the state of the system may change over time, even without input.
			- Eventual Consistency: the system will become consistent over time, given that the system doesn't receive any input during that time.

		Some of the different types of NoSQL DBs are:

			1. Key-value store (abstraction: hash table)

				The key-value store generally allows for O(1) reads and writes and is often backed by memory or SSD. They can store data in lexicographic order, allowing efficient retrieval of key ranges. They provide high-performance and are often used for simple data models or rapidly-changing data, such as in-memory cache layer. Since they offer a limited set of operations, complexity is shifted to the application layer if additional operations are needed. Redis and Memcached are some popular key-value stores.

				The key-value store is the basis for more complex systems such as document store, or in some cases, a graph database.

				Further reading:

					https://en.wikipedia.org/wiki/Key%E2%80%93value_database
					https://stackoverflow.com/questions/4056093/what-are-the-disadvantages-of-using-a-key-value-table-over-nullable-columns-or
					http://qnimate.com/overview-of-redis-architecture/

			2. Document store (abstraction: key-value store with documents as values)

				They store documents like (JSON, XML, binary, etc) and provide APIs or query language to query based on the internal structure of the document itself. Based on the underlying implementation, documents are organized by collections, tags, metadata, or directories. These documents are semi-structured and need not have the same set of fields.

				Some popular document stores are MongoDB and CouchDB.

				Further reading:

					https://en.wikipedia.org/wiki/Document-oriented_database
					https://www.elastic.co/blog/found-elasticsearch-from-the-bottom-up
					https://blog.couchdb.org/2016/08/01/couchdb-2-0-architecture/

			3. Wide column store (abstraction: nested map, ColumnFamily<Rowkey, Columns<Colkey, value, timestamp>>

				A wide column store's basic unit of data is a column (name/value pair). A column can be grouped into column families (analogous to a table). Super column families further group column families. You can access each column independently with a row key, columns with the same key form a row. Each value contains a timestamp for versioning and conflict resolution. Some popular column stores are Bigtable, HBase, Cassandra, etc.

				Wide column store offers high availability and high scalability. They are often used for very large datasets.

				Further Reading:

					http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/chang06bigtable.pdf
					https://www.edureka.co/blog/hbase-architecture/
					http://docs.datastax.com/en/cassandra/3.0/cassandra/architecture/archIntro.html

			4. Graph database (abstraction: graph)

				In a graph DB, each node is a record and each edge is a relationship between two nodes. Graph DBs are optimized to represent complex relationships with many foreign keys or many-to-many relationships. Some popular graph DBs are Neo4j, FlockDB, etc.

				Further Reading:

					https://en.wikipedia.org/wiki/Graph_database

		Further Reading:

			http://stackoverflow.com/questions/3342497/explanation-of-base-terminology
			https://medium.com/baqend-blog/nosql-databases-a-survey-and-decision-guidance-ea7823a822d#.wskogqenq
			https://www.youtube.com/watch?v=qI_g07C_Q5I
			http://horicky.blogspot.com/2009/11/nosql-patterns.html

		SQL or NoSQL

			Reasons for SQL:

				Structured data
				Strict schema
				Relational data
				Transactions
				Clear patterns for scaling
				More established: developers, community, code, tools, etc
				Lookups by index are very fast

			Reasons for NoSQL:

				Semi-structured data
				Dynamic or flexible schema
				Non-relational data
				No need for complex joins
				Store many TB (or PB) of data
				Very data intensive workload
				Very high throughput for IOPS

			We prefer NoSQL for horizontal scaling because of the following reasons:

				1. Due to Normalization, you have to often rely on 'JOIN's to fetch the required information. 'JOIN' becomes a bottleneck when you have your DB shared across multiple instances. NoSQL DBs don't have 'JOIN's, we have to do that in the application code.

				2. NoSQL DBs are created with keeping partition as the basic design principle. Most NoSQL flavors have some sort of capability of this horizontal scaling, and this happens out of the box with only a little bit of configuration required.

				3. RDBMS you expect constraints and 'ACID' transactions, these make horizontal scaling a challenge. On the other hand, most of the NoSQL DBs have 'BASE' instead of 'ACID.'

			Further Reading: 

				https://www.sitepoint.com/sql-vs-nosql-differences/
