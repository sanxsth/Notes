Functions

	A function definition is a regular binding where the value of the binding is a function. For example, this code defines 'square' to refer to a function that produces the square of a given number:

		const square = function(x) {
			return x * x;
		};

	The body of a function created this way must always be wrapped in braces, even when it consists of only a single statement. A function can have multiple parameters or no parameters at all. A 'return' statement determines the value the function returns. When control comes across such a statement, it immediately jumps out of the current function and gives the returned value to the code that called the function. A 'return' keyword without an expression after it will cause the function to return undefined. Functions that don’t have a 'return' statement at all.

	Bindings And Scope

		Each binding has a 'scope', which is the part of the program in which the binding is visible. For bindings defined outside of any function or block, the scope is the whole program, and they are known as 'global' bindings. But bindings created as function parameters, or declared inside a function can only be referenced inside that function, so they are known as 'local' bindings.

		Every time the function is called, new instances of these bindings are created. This provides some isolation between functions—each function call acts in its own little world (its local environment) and can often be understood without knowing a lot about what’s going on in the global environment.

		Bindings declared with 'let' and 'const' is local to the 'block' they are declared in. Bindings declared with 'var' is either local to a function if it's enclosed by one, or they are global. In pre-2015 JavaScript, only functions created new scopes.

		Each scope can “look out” into the scope around it. The exception is when multiple bindings have the same name—in that case, the code can see only the innermost one.

	Nested Scope

		Blocks and functions can be created inside other blocks and functions, producing multiple degrees of locality. The set of bindings visible inside a block is determined by the place of that block in the program text. Each local scope can also see all the local scopes that contain it, and all scopes can see the global scope. This approach to binding visibility is called lexical scoping.

	Functions As Values

		A function binding usually simply acts as a name for a specific piece of the program. Such a binding is defined once and never changed. This makes it easy to confuse the function and its name. But the two are different. A function value can do all the things that other values can do—you can use it in arbitrary expressions, not just call it. It is possible to store a function value in a new binding, pass it as an argument to a function, and so on. Similarly, a binding that holds a function is still just a regular binding and can, if not constant, be assigned a new value.

	Declaration Notation

		There's a slightly shorter way to create a function binding. 

			function square(x) {
				return x * x;
			}

		This is a function declaration. The statement defines the binding square and points it at the given function. It is slightly easier to write and doesn’t require a semicolon after the function.

		Function declarations are not part of the regular top-to-bottom flow of control. They are conceptually moved to the top of their scope and can be used by all the code in that scope.

	Arrow Functions

		We can declare arrow functions as follows,
			const power = (base, exponent) => {
				let result = 1;
				for (let count = 0; count < exponent; count++) {
					result *= base;
				}
				return result;
			};

		When there is only one parameter name, you can omit the parentheses around the parameter list. If the body is a single expression, rather than a block in braces, that expression will be returned from the function. For example,
			const square2 = x => x * x;

		When an arrow function has no parameters at all, its parameter list is just an empty set of parentheses. Arrow functions were added in 2015, mostly to make it possible to write small function expressions in a less verbose way.

	The Call Stack

		Because a function has to jump back to the place that called it when it returns, the computer must remember the context from which the call happened.

		The place where the computer stores this context is the 'call stack'. Every time a function is called, the current context is stored on top of this stack. When a function returns, it removes the top context from the stack and uses that context to continue execution.

		Storing this stack requires space in the computer’s memory. When the stack grows too big, the computer will fail with a message like “out of stack space” or “too much recursion”.

	Optional Arguments

		JavaScript is extremely broad-minded about the number of arguments you pass to a function. If you pass too many, the extra ones are ignored. If you pass too few, the missing parameters get assigned the value 'undefined'.

		If you write an '=' operator after a parameter, followed by an expression, the value of that expression will replace the argument when it is not provided, or pass the value 'undefined'.

	Closure

		A closure is a function having access to the parent scope, even after the parent function has closed. A good mental model is to think of function values as containing both the code in their body and the environment in which they are created. When called, the function body sees the environment in which it was created, not the environment in which it is called.

	Recursion

		A function that calls itself is called recursive. Often, recursion enables us to describe complex concepts in a simple fashion.

		function power(base, exponent) {
			if (exponent == 0) {
				return 1;
			} else {
				return base * power(base, exponent - 1);
			}
		}

		Recursion is effective in implementing 'back-tracking' algorithms.

	Functions And Side-Effects

		A pure function is a specific kind of value-producing function that not only has no side effects but also doesn’t rely on side effects from other code — for example, it doesn’t read global bindings whose value might change. A pure function has the pleasant property that, when called with the same arguments, it always produces the same value.

References
	https://eloquentjavascript.net/03_functions.html
