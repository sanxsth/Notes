Lists And Keys

	Rendering Multiple Components

		You can build collections of elements and include them in JSX using curly braces. For example,

			function NumberList(props) {
			  const numbers = props.numbers;
			  const listItems = numbers.map((number) =>
			    <li>{number}</li>
			  );
			  return (
			    <ul>{listItems}</ul>
			  );
			}

			const numbers = [1, 2, 3, 4, 5];
			ReactDOM.render(
			  <NumberList numbers={numbers} />,
			  document.getElementById('root')
			);

		The above code will generate a warning that a key should be provided for list items. A 'key' is a special string attribute that you need to include when creating a list of elements.

	Keys

		Keys help React identify which items have changed, are added, or are removed. Keys should be given to elements inside the array to give the elements a stable identity. The best way to pick a key is to use a string that uniquely identifies a list item among its siblings. If you don't have a unique key for the items, you can use the index as the key. This approach isn't recommended if the order of the items may change.

		Keys used within arrays should be unique among their siblings. However, they donâ€™t need to be globally unique. Keys serve as a hint to React and they don't get passed to your components. If you need the value in your component, pass it explicitly as a prop with a different name.

	The mapping function can be embedded in your JSX code:

		function NumberList(props) {
		  const numbers = props.numbers;
		  return (
		    <ul>
		      {numbers.map((number) =>
		        <ListItem key={number.toString()}
		                  value={number} />
		      )}
		    </ul>
		  );
		}

References

	https://reactjs.org/docs/lists-and-keys.html
	https://robinpokorny.medium.com/index-as-a-key-is-an-anti-pattern-e0349aece318
	https://reactjs.org/docs/reconciliation.html#recursing-on-children
