Composition vs Inheritance

	React has a powerful composition model, and it's recommended to use composition instead of inheritance to reuse code between components.

	Let's consider some use-cases that can be solved by composition instead of inheritance.

		Containment

			Some components don’t know their children ahead of time. This is especially common for components like Sidebar or Dialog that represent generic “boxes”. In such cases, it's recommended that such components use the special children prop to pass children elements directly into their output:

				function FancyBorder(props) {
				  return (
				    <div className={'FancyBorder FancyBorder-' + props.color}>
				      {props.children}
				    </div>
				  );
				}

				function WelcomeDialog() {
				  return (
				    <FancyBorder color="blue">
				      <h1 className="Dialog-title">
				        Welcome
				      </h1>
				      <p className="Dialog-message">
				        Thank you for visiting our spacecraft!
				      </p>
				    </FancyBorder>
				  );
				}

			Anything inside the <FancyBorder> JSX tag gets passed into the FancyBorder component as a 'children' prop.

		Specialization

			Sometimes we think about components as being “special cases” of other components. For example, we might say that a WelcomeDialog is a special case of Dialog.

			In React, this is also achieved by composition, where a more “specific” component renders a more “generic” one and configures it with props:

				function Dialog(props) {
				  return (
				    <FancyBorder color="blue">
				      <h1 className="Dialog-title">
				        {props.title}
				      </h1>
				      <p className="Dialog-message">
				        {props.message}
				      </p>
				    </FancyBorder>
				  );
				}

				function WelcomeDialog() {
				  return (
				    <Dialog
				      title="Welcome"
				      message="Thank you for visiting our spacecraft!" />
				  );
				}

	Props and composition give you all the flexibility you need to customize a component’s look and behavior in an explicit and safe way.

	If you want to reuse non-UI functionality between components, we suggest extracting it into a separate JavaScript module. The components may import it and use that function, object, or class, without extending it.

References

	https://reactjs.org/docs/composition-vs-inheritance.html