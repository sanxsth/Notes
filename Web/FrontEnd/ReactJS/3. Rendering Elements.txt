Rendering Elements

	Elements are the smallest building blocks of React apps. An element describes what you want to see on the screen. Unlike browser DOM elements, React elements are plain objects and are cheap to create. React DOM takes care of updating the DOM to match the react elements.

	To render a React element into DOM, pass both to 'ReactDOM.render()'. For example, 

		const element = <h1>Hello, world</h1>;
		ReactDOM.render(element, document.getElementById('root'));

	React Elements are immuatable. Once you create them, you can't change its children or attributes. One way to update the UI is to create a new element, and pass it to 'ReactDOM.render()'. For example, consider the ticking clock:

		function tick() {
		  const element = (
		    <div>
		      <h1>Hello, world!</h1>
		      <h2>It is {new Date().toLocaleTimeString()}.</h2>
		    </div>
		  );
		  ReactDOM.render(element, document.getElementById('root'));
		}

		setInterval(tick, 1000);

	React updates only what's necessary. React compares the element and its children to the previous one, and only applies the DOM updates necessary to bring the DOM to the desired state.	In the above example, only the text node whose contents have changed gets updated by ReactDOM.

References

	https://reactjs.org/docs/rendering-elements.html
	https://reactjs.org/docs/faq-internals.html
	https://www.codecademy.com/articles/react-virtual-dom