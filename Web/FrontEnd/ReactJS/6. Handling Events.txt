Handling Events

	React events are named using cameCase instead, rather than lowercase. For example,

		HTML:

			<button onclick="activateLasers()">
			  Activate Lasers
			</button>

		React:

			<button onClick={activateLasers}>
			  Activate Lasers
			</button>

	Also, you can't return 'false' to prevent default behaviour in React. You must call 'preventDefault' explicitly. For example,

		function ActionLink() {
		  function handleClick(e) {
		    e.preventDefault(); // e is a synthetic event
		    console.log('The link was clicked.');
		  }

		  return (
		    <a href="#" onClick={handleClick}>
		      Click me
		    </a>
		  );
		}

	When using React, you generally don't need to call 'addEventLisenter' to add listeners to a DOM element after it is created. Instead, just provide a listener when the element is initially rendered. A common pattern for adding listeners in React is as follows:

		class Toggle extends React.Component {
		  constructor(props) {
		    super(props);
		    this.state = {isToggleOn: true};

		    // This binding is necessary to make `this` work in the callback
		    this.handleClick = this.handleClick.bind(this); 
		  }

		  handleClick() {
		    this.setState(state => ({
		      isToggleOn: !state.isToggleOn
		    }));
		  }

		  render() {
		    return (
		      <button onClick={this.handleClick}>
		        {this.state.isToggleOn ? 'ON' : 'OFF'}
		      </button>
		    );
		  }
		}

		ReactDOM.render(
		  <Toggle />,
		  document.getElementById('root')
		);

	Instead of 'bind' we can also make use of 'public class field syntax' or 'arrow functions'. The arrow function can be used like this:

		class LoggingButton extends React.Component {
		  handleClick() {
		    console.log('this is:', this);
		  }

		  render() {
		    // This syntax ensures `this` is bound within handleClick
		    return (
		      <button onClick={() => this.handleClick()}>
		        Click me
		      </button>
		    );
		  }
		}

	The drawback of this approach is that a different arrow function is created each time the 'LoginButton' renders. If the callback is passed as a prop to lower components, those components might do an extra re-rendering. The recommended approach is to do the binding in the constructor.

References

	https://reactjs.org/docs/handling-events.html
