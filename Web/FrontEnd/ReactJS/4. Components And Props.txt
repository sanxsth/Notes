Components And Props

	Components let you split up the UI into independent, reusable pieces, and think about each piece in isolation. Conceptually, components are like JS functions. They accept arbitrary inputs and return React elements describing what should appear on the screen.

	Function And Class Components

		The simplest way to write a component is to write a JS function:

			function Welcome(props) {
			  return <h1>Hello, {props.name}</h1>;
			}

		We can use ES6 class to define component:

			class Welcome extends React.Component {
			  render() {
			    return <h1>Hello, {this.props.name}</h1>;
			  }
			}

	When react sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object (props).
	React treats components starting with lowercase letters as DOM tags. So user-defined components should start with a capital letter. Components can refer to other components in their output.

	Props Are Read Only

		Components should never modify their props. All React components should act like 'pure functions' with respect to their props.

References

	https://reactjs.org/docs/components-and-props.html