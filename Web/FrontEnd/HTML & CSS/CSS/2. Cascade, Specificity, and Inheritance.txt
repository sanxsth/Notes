Cascade, Specificity, and Inheritance

	There are three orders to consider, listed here in the increasing order of importance. Later ones overrule the earlier ones:

				1. Source Order
				2. Specificity
				3. Importance

	Cascade

		Stylesheets cascade -- at a very simple level, this means that the order of the CSS matter; when two rules apply that have the same specificity the one in the CSS that comes last is the one that would be used.

	Specificity

		Specificity is how the browser decides which rule to applies if multiple rules have different selectors, but could still apply to the same element. It is a measure of how specific a selector's selection will be.

		The amount of specificity a selector has is measured using four different values.

			1. Thousands: Score a one in this column if the declaration is inside a style attribute (inline styles).
			2. Hundreds: Score a one in this column for each ID selector contained inside the overall selector.
			3. Tens: Score a one in this column for each class selector, attribute selector, or pseudo-class contained inside the overall selector.
			4. Ones: Score a one in this each element for each element selector or pseudo-element contained inside the overall selector.

		Note: The universal selector (*), combinators (+, >, ~, ''), and negation pseudo-class (:not) do not affect specificity.

		'!important' is used to make a specific property and value the most specific thing, thus overriding the normal rules of the cascade. The only way to override important is to add '!important' to a declaration with the same or higher specificity.

		Conflicting declarations will be applied in the following order, with later ones overriding earlier ones:

			1. Declarations in user-agent stylesheets.
			2. Normal declarations in user stylesheets.
			3. Normal declarations in author stylesheets.
			4. Important declarations in author stylesheets.
			5. Important declarations user style sheets.

	Inheritance

		Some CSS property set on a parent element will be inherited by their child elements, and some aren't. Things like widths, margins, padding, and borders do not inherit. If a border were to be inherited by the children of our list, every single list and list item would gain a border â€” probably not an effect we would ever want!

		Which properties are inherited by default and which aren't is largely down to common sense.

		Controlling Inheritance

			CSS provides four special universal property values for controlling inheritance. Every CSS property accepts these values.

			1. inherit: sets the property value the same as that of the parent
			2. initial: sets the property value to the initial value (default value) of the property.
			3. unset: resets the property to its natural value, which means that if the property is naturally inherited it acts like 'inherited', otherwise it acts like 'initial'.
			4. revert: reverts the cascaded value of the property from its current value to the value the property would have had if no changes had been made by the current style origin to the current element.

			Use 'all' to apply these inheritance values to all the elements at once.


	Inspecting CSS cascade using browser dev tools: https://youtu.be/Sp9ZfSvpf7A
