Cascading Style Sheets

	CSS is developed to control the visual appearance of our HTML documents. It is concerned about the appearance of the data and not the data itself.

	CSS is weird, but why is it? https://youtu.be/aHUtMbJw8iA

	
	CSS Syntax

		CSS is a rule based engine. The following code shows a very simple CSS code:

			h1 {
				color: red;
				font-size: 5em;
			}

		The rule opens with a "selector" which selects the HTML element we are going to style. We then have a set of curly braces. Inside those will be one or more declarations, which take the form of 'property' and 'value' pairs. Each pair specifies a property of the element(s) we are selecting, then a value we'd like to give the property.

		Note: As you start to style a document you mustn't make it less accessible.


	Applying CSS To HTML

		There are three methods of applying CSS to a document. They are:

			i. External Stylesheet

				Usage:

					<link rel="stylesheet" href="styles.css"> // href="path to your stylesheet"

				This method is useful for styling websites with multiple pages, we can style all of them using the same stylesheet.

			ii. Internal Stylesheet

				An internal stylesheet resides within an HTML document. To create an internal stylesheet, you place CSS inside a <style> element contained inside the HTML <head>.

				Usage:

					<head>
					    <meta charset="utf-8">
					    <title>My CSS experiment</title>
					    <style>
					      h1 {
					        color: blue;
					        background-color: yellow;
					        border: 1px solid black;
					      }

					      p {
					        color: red;
					      }
					    </style>
					  </head>

				Concerning maintenance, this is an inefficient way of styling your websites.

			iii. Inline Styles

				 Inline-styles are CSS declarations that affect a single HTML element, contained within a style attribute.

				 Usage:

				 	<body>
				    	<h1 style="color: blue;background-color: yellow;border: 1px solid black;">Hello World!</h1>
					    <p style="color:red;">This is my first CSS example</p>
					</body>


				 Avoid using this styling method for the following reasons:

				 	- It's the most inefficient implementation of CSS for maintenance. 
				 	- Inline CSS mixes presentation code with HTML and content, making more diffictul to read and understand.

			Selectors

				A selector targets HTML to apply styles to content. Each CSS rule starts with a selector -- or a list of selectors -- to tell the browser which element or elements the rules should apply to.

			Specificity

				Sometimes multiple selectors target the same HTML element. The CSS language has rules to control which selector is stronger in the event of a conflict. These rules are called 'cascade' and 'specificity'.

				Later styles replace conflicting styles that appear earlier in the stylesheet. This is the cascade rule.

				Examples:

					1.
						p {
					  color: red;
					}

					p {
					  color: blue; // blue would be applied since this comes later than red
					}

				2.
					.special {
					  color: red;
					}

					p {
					  color: blue;
					}

					<p class="special">What color am I?</p> // red would be applied due to higher specificity.

		Properties And Values

			h1 {
				color: red;
				background-color: yellow;
			}

			The property-value pairing is called 'CSS declarations'. CSS declarations are found within 'CSS Declaration Blocks'. Finally, 'CSS Declaration Blocks' is paired with 'selectors' to produce 'CSS rulesets'.

			Note: CSS properties and values are case-sensitive

		Functions

			Some CSS values takes the form of functions. An example would be calc():

				.box {
					width: calc(90% - 30px);
				}

		@rules (at-rules)

			CSS @rules provides instructions for what CSS should perform or how it should behave.

			Examples:

				- @import 'style2.css'; /* imports a stylesheet into another */
				- @media (min-width: 30em) { /* Media queries use conditional logic for applying CSS styling */
					body {
						background-color: blue;
					}
				}

	How CSS Works

		Following are the steps taken by the browser to display a webpage:

			1. The browser loads the HTML
			2. Converts HTML into a DOM. DOM represents the doc in the computer's memory.
			3. Browser will now fetch most of the resources that are linked to the HTML document.
			4. The browser parses the fetched CSS and sorts the different rules by their selector types into different "buckets". Based on the selectors it finds, it works out which rules should be applied to which nodes in the DOM, and attaches styles to them as required.
			5. The render tree (DOM + CSS) is laid out in the structure it should appear in after the rules have been applied.
			6. The visual display of the page is shown on the screen.

		About the DOM

			A DOM has a tree-like structure. Each element, attribute, and piece of text in the markup language becomes a DOM node. DOM is where your CSS and document's content meet.

		What happens when the browser encounters CSS it doesn't understand.

			If the browser encounters a CSS property/value it doesn't understand, it does nothing and moves on to the next bit of CSS. If it encounters an unkown selector, it will complety ignore that rule set. We can use the following trick to add new CSS changes with fallback options for older browsers:

				.box {
					width: 500px;
					width: calc(90% - 50px); /* will be ignored by older browsers and the previous value would be selected */
				}
