Knapsack Problem

	The knapsack problem is a problem in combinatorial optimization.

	There are a few variations of the problem:

		1. 0-1 Knapsack Problem

			Problem Statement

				Consider a thief gets into a home to rob and he carries a knapsack. There is a fixed number of items in the home — each with its own weight and value — Jewelry, with less weight and highest value vs tables, with less value but a lot heavy. To add fuel to the fire, the thief has an old knapsack that has limited capacity. Obviously, he can’t split the table into half or jewelry into 3/4ths. He either takes it or leaves it.

			Solution

				Let dp[i][j] represent the solution for a knapsack with capacity 'i' and 'j' available items. We observe that dp[0][y] is '0', since we can't add any items to a knapsack with capacity '0'. Also, dp[x][0] is '0', since there are no items available to add to the knapsack.

				If i >= w[j], where w[j] is the weight of item 'j', then it is possible to add item 'j' to the knapsack with capacity 'i', and the resulting capacity would be i-w[j]. We can also choose to not add item 'j' to our knapsack. 

				Therefore, we have:

					if ( i - w[j] >= 0) // we have the capacity to add item 'j'
						dp[i][j] = max( dp[i - w[j]][j-1] + val[j], dp[i][j-1] ) // val[j] represents the value of item 'j'.
					else
						dp[i][j] = dp[i][j-1]

				Time complexity: O(n*m), where 'n' is the capacity of the knapsack and 'm' is the total number of items.

		2. Bounded Knapsack Problem

			Problem Statement

				The Bounded knapsack problem is defined by a knapsack capacity and a set of n item types, each having a positive integer value, a positive integer weight, and a positive integer bound on its availability. Basically, it's like 0-1 Knapsack, but each item has some positive integer copies of itself.

			Solution

				We can easily extend 0-1 knapsack. We define dp[i][j][k] as the solution for a knapsack with capacity 'i', 'j' items available, and 'k' copies of 'j'th item.

				if (i - w[j] >= 0)
				{
					if( k > 0)
						dp[i][j][k] = max( dp[i-w[j]][j][k-1] + val[i], dp[i][j-1][k2]), where k2 is the max capacity of j
					else
						dp[i][j][k] = dp[i][j-1][k2]
				}
				else
					dp[i][j][k] = dp[i][j-1][k2]

				Time complexity = O(n*m*k)

		3. Unbounded Knapsack Problem

			Problem Statement

				The Unbounded knapsack problem is defined by a knapsack capacity and a set of n item types, each having a positive integer value, a positive integer weight, and unlimited availability. Basically, it's like 0-1 Knapsack, but each item has unlimited copies of itself.

			Solution

				Let dp[i] represent the solution for a knapsack of capacity 'i'. We have the following recurrence relation:

					dp[i] = max (dp[i - w[j1]] + val[j1], dp[i - w[j2]] + val[j2], ..., dp[i - w[jn]] + val[jn]), where 'j' is any item with w[j] <= i.

				Time complexity: O(n*m)


		We also have a variance called 'Fractional Knapsack'(https://afteracademy.com/blog/fractional-knapsack-problem) which is solved using a greedy approach, hence not covered here.

References

	https://en.wikipedia.org/wiki/Knapsack_problem
	https://medium.com/@fabianterh/how-to-solve-the-knapsack-problem-with-dynamic-programming-eb88c706d3cf
	https://stackoverflow.com/questions/9559674/dp-algorithm-for-bounded-knapsack
	https://www.geeksforgeeks.org/unbounded-knapsack-repetition-items-allowed
	