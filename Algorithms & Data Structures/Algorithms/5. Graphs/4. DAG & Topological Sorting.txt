DAG & Topological Sorting

	Directed Acyclic Graph

		A directed acyclic graph (DAG) is a directed graph with no directed cycles.

	Topological Sorting

		Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge (u, v), vertex 'u' comes before 'v' in the ordering. Topological Sorting for a graph is not possible if the graph is not a DAG.

		Algorithm for finding the topological sort for a DAG

			In topological sorting, we use a temporary stack. We iterate over the given nodes and start a DFS on them if they weren't visited before. For a given node, once all its adjacent nodes have been traversed, we push it to a stack. Finally, print the contents of the stack. Note that a vertex is pushed to stack only when all of its adjacent vertices (and their adjacent vertices and so on) are already in the stack.

		Time complexity: O(V + E).
		Auxiliary Space: O(N). We make use of a stack and a visited array.

References

	https://en.wikipedia.org/wiki/Directed_acyclic_graph
	https://www.geeksforgeeks.org/topological-sorting
